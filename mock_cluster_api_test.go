// Code generated by mockery v1.0.0
package kafkactl

import mock "github.com/stretchr/testify/mock"

// MockClusterAPI is an autogenerated mock type for the ClusterAPI type
type MockClusterAPI struct {
	mock.Mock
}

// Broker provides a mock function with given fields: id
func (_m *MockClusterAPI) Broker(id BrokerID) (Broker, error) {
	ret := _m.Called(id)

	var r0 Broker
	if rf, ok := ret.Get(0).(func(BrokerID) Broker); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Broker)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(BrokerID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Brokers provides a mock function with given fields:
func (_m *MockClusterAPI) Brokers() ([]Broker, error) {
	ret := _m.Called()

	var r0 []Broker
	if rf, ok := ret.Get(0).(func() []Broker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Broker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller provides a mock function with given fields:
func (_m *MockClusterAPI) Controller() (Broker, error) {
	ret := _m.Called()

	var r0 Broker
	if rf, ok := ret.Get(0).(func() Broker); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Broker)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAllTopics provides a mock function with given fields:
func (_m *MockClusterAPI) DescribeAllTopics() ([]TopicPartitionInfo, error) {
	ret := _m.Called()

	var r0 []TopicPartitionInfo
	if rf, ok := ret.Get(0).(func() []TopicPartitionInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TopicPartitionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTopic provides a mock function with given fields: name
func (_m *MockClusterAPI) DescribeTopic(name string) ([]TopicPartitionInfo, error) {
	ret := _m.Called(name)

	var r0 []TopicPartitionInfo
	if rf, ok := ret.Get(0).(func(string) []TopicPartitionInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TopicPartitionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTopicsForBroker provides a mock function with given fields: id
func (_m *MockClusterAPI) DescribeTopicsForBroker(id BrokerID) ([]TopicPartitionInfo, error) {
	ret := _m.Called(id)

	var r0 []TopicPartitionInfo
	if rf, ok := ret.Get(0).(func(BrokerID) []TopicPartitionInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TopicPartitionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(BrokerID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *MockClusterAPI) ID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartitionReassignRequest provides a mock function with given fields: partitions
func (_m *MockClusterAPI) PartitionReassignRequest(partitions []PartitionReplicas) ReassignmentReq {
	ret := _m.Called(partitions)

	var r0 ReassignmentReq
	if rf, ok := ret.Get(0).(func([]PartitionReplicas) ReassignmentReq); ok {
		r0 = rf(partitions)
	} else {
		r0 = ret.Get(0).(ReassignmentReq)
	}

	return r0
}

// ReassignPartitions provides a mock function with given fields: req
func (_m *MockClusterAPI) ReassignPartitions(req ReassignmentReq) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(ReassignmentReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicaDistribution provides a mock function with given fields: topic
func (_m *MockClusterAPI) ReplicaDistribution(topic string) ([]PartitionReplicas, error) {
	ret := _m.Called(topic)

	var r0 []PartitionReplicas
	if rf, ok := ret.Get(0).(func(string) []PartitionReplicas); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PartitionReplicas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicaDistributionByBroker provides a mock function with given fields: topic
func (_m *MockClusterAPI) ReplicaDistributionByBroker(topic string) ([]TopicBrokerDistribution, error) {
	ret := _m.Called(topic)

	var r0 []TopicBrokerDistribution
	if rf, ok := ret.Get(0).(func(string) []TopicBrokerDistribution); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TopicBrokerDistribution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Topics provides a mock function with given fields:
func (_m *MockClusterAPI) Topics() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
